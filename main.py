# -*- coding: utf-8 -*-
# main_bot_updated.py

import discord
from discord.ext import commands, tasks
import yt_dlp # ‡πÉ‡∏ä‡πâ yt-dlp ‡πÅ‡∏ó‡∏ô youtube_dl ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
import asyncio
import logging
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
logging.basicConfig(level=logging.INFO)

# Token ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏Ñ‡∏∏‡∏ì (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö)
# ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ environment variable ‡∏´‡∏£‡∏∑‡∏≠ config file ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö token ‡∏à‡∏£‡∏¥‡∏á
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN', "YOUR_BOT_TOKEN_HERE") # ‡πÉ‡∏™‡πà Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ env var

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents (‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
intents = discord.Intents.default()
intents.message_content = True # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)
intents.voice_states = True    # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á

# Prefix ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
bot = commands.Bot(command_prefix="%", intents=intents)

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö yt-dlp ‡πÅ‡∏•‡∏∞ ffmpeg
YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': False,       # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ yt-dlp ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
    'nocheckcertificate': True,
    'ignoreerrors': True,      # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå: ‡πÉ‡∏´‡πâ yt-dlp ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'ytsearch',
    'source_address': '0.0.0.0', # ipv6 addresses cause issues sometimes
    'extract_flat': False,     # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
    # ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cookiefile ‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
    'cookiefile': '/app/cookies.txt', # ‡∏´‡∏£‡∏∑‡∏≠ path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
}

FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', # ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏∂‡πâ‡∏ô
    'options': '-vn' # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÄ‡∏≠‡∏≤‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á
}

# Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (guild)
queues = {} # {guild_id: [song_info, song_info, ...]}

class MusicCog(commands.Cog):
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.bot.idle_timers = {} # {guild_id: asyncio.Task}
        self.bot.current_song = {} # {guild_id: song_info}

    async def start_idle_timer(self, ctx):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        """
        guild_id = ctx.guild.id
        if guild_id in self.bot.idle_timers and self.bot.idle_timers[guild_id]:
            self.bot.idle_timers[guild_id].cancel() # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

        self.bot.idle_timers[guild_id] = self.bot.loop.create_task(self.auto_disconnect(ctx))

    async def cancel_idle_timer(self, guild_id):
        """
        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        """
        if guild_id in self.bot.idle_timers and self.bot.idle_timers[guild_id]:
            self.bot.idle_timers[guild_id].cancel()
            self.bot.idle_timers[guild_id] = None

    async def auto_disconnect(self, ctx):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        """
        await asyncio.sleep(15) # ‡∏£‡∏≠ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client

        if voice_client and voice_client.is_connected():
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
            is_playing_or_paused = voice_client.is_playing() or voice_client.is_paused()
            is_queue_empty = not (guild_id in queues and queues[guild_id])

            if not is_playing_or_paused and is_queue_empty:
                logging.info(f"Auto-disconnecting from {ctx.guild.name} due to inactivity.")
                await voice_client.disconnect()
                await ctx.send("üëã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞!")
                # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö guild ‡∏ô‡∏µ‡πâ
                if guild_id in queues:
                    queues[guild_id].clear()
                if guild_id in self.bot.current_song:
                    del self.bot.current_song[guild_id]
        
        if guild_id in self.bot.idle_timers: # ‡∏•‡πâ‡∏≤‡∏á task ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dict
             self.bot.idle_timers[guild_id] = None


    async def play_next_song(self, ctx):
        """
        ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (guild) ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
        """
        guild_id = ctx.guild.id
        await self.cancel_idle_timer(guild_id) # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å idle timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà

        if guild_id in queues and queues[guild_id]:
            voice_client = ctx.guild.voice_client
            if voice_client and voice_client.is_connected():
                if voice_client.is_playing() or voice_client.is_paused(): # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≠‡∏ô
                    return

                song_info = queues[guild_id].pop(0)
                source_url = song_info['source']
                title = song_info['title']
                webpage_url = song_info['webpage_url']
                requester = song_info['requester']

                try:
                    player = discord.FFmpegPCMAudio(source_url, **FFMPEG_OPTIONS)
                    
                    def after_playing(error):
                        if error:
                            logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á: {error}")
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                        if ctx.guild.voice_client and ctx.guild.voice_client.is_connected():
                            fut = asyncio.run_coroutine_threadsafe(self.play_next_song(ctx), self.bot.loop)
                            try:
                                fut.result(timeout=5) # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ block ‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                            except asyncio.TimeoutError:
                                logging.warning(f"play_next_song task timed out for guild {guild_id}")
                            except Exception as e_fut:
                                logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å play_next_song: {e_fut}")
                        else:
                            logging.info(f"Voice client not connected in guild {guild_id} after song, not playing next.")
                            # ‡∏ñ‡πâ‡∏≤ voice client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                            if guild_id in queues:
                                queues[guild_id].clear()
                            if guild_id in self.bot.current_song:
                                del self.bot.current_song[guild_id]


                    voice_client.play(player, after=after_playing)
                    
                    embed = discord.Embed(
                        title="üéß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á",
                        description=f"[{title}]({webpage_url})",
                        color=discord.Color.blue()
                    )
                    embed.add_field(name="‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢", value=requester, inline=False)
                    embed.set_thumbnail(url=song_info.get('thumbnail', ''))
                    await ctx.send(embed=embed)
                    
                    self.bot.current_song[guild_id] = song_info

                except Exception as e:
                    logging.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ: {e}")
                    await ctx.send(f"üò• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á `{title}` ‡πÑ‡∏î‡πâ: {e}")
                    await self.play_next_song(ctx) # ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            else: # voice_client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                if guild_id in queues: queues[guild_id].clear()
                if guild_id in self.bot.current_song: del self.bot.current_song[guild_id]
        else: # ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î
            if guild_id in self.bot.current_song:
                 del self.bot.current_song[guild_id]
            await ctx.send("üéµ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
            if ctx.guild.voice_client and ctx.guild.voice_client.is_connected():
                await ctx.send(f"‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏û‡∏¥‡∏°‡∏û‡πå `{self.bot.command_prefix}play <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠)")
                await self.start_idle_timer(ctx)

    @commands.command(name="play", aliases=["p", "‡πÄ‡∏•‡πà‡∏ô"], help="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube ‡∏´‡∏£‡∏∑‡∏≠ URL (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå)")
    async def play(self, ctx, *, search_query: str):
        guild_id = ctx.guild.id
        await self.cancel_idle_timer(guild_id) # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å idle timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á play

        if not ctx.author.voice:
            await ctx.send("ü§î ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ô‡∏∞")
            return

        voice_channel = ctx.author.voice.channel
        voice_client = ctx.guild.voice_client

        if not voice_client:
            try:
                voice_client = await voice_channel.connect()
                await ctx.send(f"üîä ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡πà‡∏≠‡∏á `{voice_channel.name}` ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
            except Exception as e:
                await ctx.send(f"üò• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
                return
        elif voice_client.channel != voice_channel:
            try:
                await voice_client.move_to(voice_channel)
                await ctx.send(f"üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á `{voice_channel.name}` ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
            except Exception as e:
                await ctx.send(f"üò• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
                return
        
        processing_msg = await ctx.send(f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• `{search_query}`...")
        songs_to_add = []
        playlist_title = None # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå

        try:
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                info = ydl.extract_info(search_query, download=False)

            if not info:
                await processing_msg.edit(content=f"üò≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `{search_query}`")
                return

            if 'entries' in info: # Playlist
                playlist_title = info.get('title', search_query)
                await processing_msg.edit(content=f"üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå: **{playlist_title}** ({len(info['entries'])} ‡πÄ‡∏û‡∏•‡∏á)...")
                
                for i, entry in enumerate(info['entries']):
                    if not entry:
                        logging.warning(f"Skipping None entry in playlist: {playlist_title} at index {i}")
                        continue
                    
                    stream_url = entry.get('url')
                    if not stream_url: # yt-dlp ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏∂‡∏á URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        title_entry = entry.get('title', f'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1} (‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠)')
                        logging.warning(f"Skipping entry '{title_entry}' in playlist '{playlist_title}' due to missing 'url'.")
                        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞ spam chat
                        # await ctx.send(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° '{title_entry}' ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô")
                        continue

                    songs_to_add.append({
                        'source': stream_url,
                        'title': entry.get('title', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á'),
                        'webpage_url': entry.get('webpage_url', '#'),
                        'thumbnail': entry.get('thumbnail', ''),
                        'duration': entry.get('duration', 0),
                        'requester': ctx.author.mention
                    })
                if not songs_to_add:
                    await processing_msg.edit(content=f"üò• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå `{playlist_title}` ‡πÄ‡∏•‡∏¢")
                    return
            else: # Single video
                stream_url = info.get('url')
                if not stream_url:
                    await processing_msg.edit(content=f"üò• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á `{info.get('title', search_query)}` ‡πÑ‡∏î‡πâ")
                    return

                songs_to_add.append({
                    'source': stream_url,
                    'title': info.get('title', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á'),
                    'webpage_url': info.get('webpage_url', '#'),
                    'thumbnail': info.get('thumbnail', ''),
                    'duration': info.get('duration', 0),
                    'requester': ctx.author.mention
                })
        except Exception as e:
            logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö yt-dlp ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")
            await processing_msg.edit(content=f"üò• ‡∏≠‡πä‡∏∞! ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return

        if not songs_to_add:
            await processing_msg.edit(content=f"üò• ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `{search_query}`")
            return

        if guild_id not in queues:
            queues[guild_id] = []
        
        is_first_song_in_empty_queue = not queues[guild_id] and not (voice_client.is_playing() or voice_client.is_paused())

        for song_info in songs_to_add:
            queues[guild_id].append(song_info)

        await processing_msg.delete() # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."

        if len(songs_to_add) == 1:
            song = songs_to_add[0]
            embed = discord.Embed(
                title="üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß",
                description=f"[{song['title']}]({song['webpage_url']})",
                color=discord.Color.green()
            )
            embed.add_field(name="‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢", value=song['requester'])
            if song['duration']:
                m, s = divmod(song['duration'], 60); h, m = divmod(m, 60)
                duration_str = f"{int(h):02d}:{int(m):02d}:{int(s):02d}" if h else f"{int(m):02d}:{int(s):02d}"
                embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß", value=duration_str)
            embed.set_thumbnail(url=song.get('thumbnail', ''))
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(
                title="üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß",
                description=f"‡πÄ‡∏û‡∏¥‡πà‡∏° **{len(songs_to_add)}** ‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å **{playlist_title or '‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ'}**",
                color=discord.Color.green()
            )
            embed.add_field(name="‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢", value=ctx.author.mention)
            await ctx.send(embed=embed)

        if is_first_song_in_empty_queue or not (voice_client.is_playing() or voice_client.is_paused()):
            await self.play_next_song(ctx)


    @commands.command(name="skip", aliases=["s", "‡∏Ç‡πâ‡∏≤‡∏°"], help="‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    async def skip(self, ctx):
        voice_client = ctx.guild.voice_client
        if not voice_client or not (voice_client.is_playing() or voice_client.is_paused()):
            await ctx.send("ü§î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞")
            return

        await self.cancel_idle_timer(ctx.guild.id) # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å idle timer ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ skip
        voice_client.stop() # ‡∏Å‡∏≤‡∏£ stop ‡∏à‡∏∞ trigger 'after' callback ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å play_next_song
        await ctx.send("‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤")
        # play_next_song ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ after_playing, ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° idle timer

    @commands.command(name="queue", aliases=["q", "‡∏Ñ‡∏¥‡∏ß"], help="‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    async def queue_command(self, ctx):
        guild_id = ctx.guild.id
        
        if not (guild_id in queues and queues[guild_id]) and not (guild_id in self.bot.current_song and self.bot.current_song[guild_id]):
            await ctx.send(f"Ïç∞ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏à‡πâ‡∏≤ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `{self.bot.command_prefix}play` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏î‡∏π‡∏™‡∏¥")
            return

        embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á üìú", color=discord.Color.orange())
        
        if guild_id in self.bot.current_song and self.bot.current_song[guild_id]:
            current = self.bot.current_song[guild_id]
            embed.add_field(
                name="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà üéß", 
                value=f"[{current['title']}]({current['webpage_url']}) (‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢: {current['requester']})", 
                inline=False
            )
        
        queue_list_str = ""
        if guild_id in queues and queues[guild_id]:
            for i, song in enumerate(queues[guild_id][:10]):
                queue_list_str += f"{i+1}. [{song['title']}]({song['webpage_url']}) (‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢: {song['requester']})\n"
        
        if not queue_list_str:
            queue_list_str = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"

        embed.add_field(name="‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚è≥", value=queue_list_str, inline=False)
        
        if guild_id in queues and len(queues[guild_id]) > 10:
            embed.set_footer(text=f"‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(queues[guild_id]) - 10} ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß...")
            
        await ctx.send(embed=embed)

    @commands.command(name="stop", aliases=["‡∏´‡∏¢‡∏∏‡∏î"], help="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß")
    async def stop(self, ctx):
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client

        if voice_client and voice_client.is_connected():
            voice_client.stop()
            if guild_id in queues:
                queues[guild_id].clear()
            if guild_id in self.bot.current_song:
                del self.bot.current_song[guild_id]
            await ctx.send("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° idle timer ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß
            await ctx.send(f"‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏û‡∏¥‡∏°‡∏û‡πå `{self.bot.command_prefix}play <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠)")
            await self.start_idle_timer(ctx)
        else:
            await ctx.send("ü§î ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà")

    @commands.command(name="leave", aliases=["dc", "‡∏≠‡∏≠‡∏Å"], help="‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
    async def leave(self, ctx):
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client

        await self.cancel_idle_timer(guild_id) # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å idle timer ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å

        if voice_client and voice_client.is_connected():
            await voice_client.disconnect()
            if guild_id in queues: queues[guild_id].clear()
            if guild_id in self.bot.current_song: del self.bot.current_song[guild_id]
            await ctx.send("üëã ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞!")
        else:
            await ctx.send("ü§î ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞")
            
    @commands.command(name="nowplaying", aliases=["np", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô"], help="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà")
    async def nowplaying(self, ctx):
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client

        if not voice_client or not (voice_client.is_playing() or voice_client.is_paused()): # Check if playing or paused
            await ctx.send("ü§î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞")
            return

        if guild_id in self.bot.current_song and self.bot.current_song[guild_id]:
            current = self.bot.current_song[guild_id]
            embed = discord.Embed(
                title="üéß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á",
                description=f"[{current['title']}]({current['webpage_url']})",
                color=discord.Color.purple()
            )
            embed.add_field(name="‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢", value=current['requester'], inline=True)
            if current.get('duration'):
                m, s = divmod(current['duration'], 60); h, m = divmod(m, 60)
                duration_str = f"{int(h):02d}:{int(m):02d}:{int(s):02d}" if h else f"{int(m):02d}:{int(s):02d}"
                embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß", value=duration_str, inline=True)
            embed.set_thumbnail(url=current.get('thumbnail', ''))
            await ctx.send(embed=embed)
        else:
            await ctx.send("ü§î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)")

    @play.before_invoke
    @skip.before_invoke
    @stop.before_invoke
    @nowplaying.before_invoke
    # @queue_command.before_invoke # queue can be checked without being in channel
    async def ensure_voice_state(self, ctx):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ voice ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        """
        if ctx.command.name == 'play': # play command handles its own voice channel joining logic
             # For play, ensure user is in a voice channel
            if not ctx.author.voice:
                await ctx.send("ü§î ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ô‡∏∞")
                raise commands.CommandError("User not in a voice channel for play command.")
            return # Play command handles its own connection logic

        # For other commands (skip, stop, nowplaying)
        if not ctx.guild.voice_client:
            await ctx.send(f"‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `{self.bot.command_prefix}play` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤")
            raise commands.CommandError("Bot is not connected to a voice channel.")
        
        if not ctx.author.voice or ctx.author.voice.channel != ctx.guild.voice_client.channel:
            await ctx.send("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
            raise commands.CommandError("User is not in the same voice channel as the bot.")

@bot.event
async def on_ready():
    print(f'ü§ñ {bot.user.name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤!')
    print(f'üÜî ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: {bot.user.id}')
    print('------')
    await bot.add_cog(MusicCog(bot))

@bot.event
async def on_voice_state_update(member, before, after):
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏ó) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á
    """
    if member == bot.user: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏≠‡∏á
        voice_client = member.guild.voice_client
        guild_id = member.guild.id

        if not after.channel and voice_client: # ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠ disconnect ‡πÄ‡∏≠‡∏á)
            logging.info(f"Bot disconnected from voice channel in {member.guild.name}.")
            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å idle timer ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if guild_id in bot.idle_timers and bot.idle_timers[guild_id]:
                bot.idle_timers[guild_id].cancel()
                bot.idle_timers[guild_id] = None
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á guild ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
            if guild_id in queues:
                queues[guild_id].clear()
                logging.info(f"Cleared queue for guild {guild_id} after disconnect.")
            if guild_id in bot.current_song:
                del bot.current_song[guild_id]
                logging.info(f"Cleared current song for guild {guild_id} after disconnect.")
            
            # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å voice_client.cleanup() ‡∏´‡∏£‡∏∑‡∏≠ player.cleanup() ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            # discord.py ‡πÅ‡∏•‡∏∞ FFMPEGPCMAudio ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ voice_client.disconnect() ‡∏´‡∏£‡∏∑‡∏≠ stop()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    print("üö® ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà BOT_TOKEN ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó!")
    print("   ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô Environment Variable ‡∏ä‡∏∑‡πà‡∏≠ DISCORD_BOT_TOKEN ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
else:
    try:
        bot.run(BOT_TOKEN)
    except discord.errors.LoginFailure:
        print("üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö BOT_TOKEN ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    except Exception as e:
        print(f"üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó: {e}")

